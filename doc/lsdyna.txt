*lsdyna.txt* 		For Vim version 8.0		Last change: 2021 January 7th
================================================================================
                   _               ____                                        ~
                  | |    ___      |  _ \ _   _ _ __   __ _                     ~
                  | |   / __|_____| | | | | | | '_ \ / _` |                    ~
                  | |___\__ \_____| |_| | |_| | | | | (_| |                    ~
                  |_____|___/     |____/ \__, |_| |_|\__,_|                    ~
                                         |___/                                 ~
                                               VIM Filetype Plugin             ~

              -----------------------------------------------------
              Author: Bartosz Gradzik (bartosz.gradzik@hotmail.com)
              ----------------------------------------------------- 

================================================================================
CONTENTS

    1. Introduction............................|lsdyna-introduction|
    2. Installation............................|lsdyna-install|
    3. Syntax highlighting.....................|lsdyna-syntax|
    4. Folding.................................|lsdyna-folding|
    5. Ls-Dyna omni-completion.................|lsdyna-completeOmni|
       5.1 Keyword completion..................|lsdyna-completeKeyword|
       5.2 Option completion...................|lsdyna-completeOption|
       5.3 Id completion.......................|lsdyna-completeId|
       5.4 Parameter completion................|lsdyna-completeParameter|
    6. Keyword manager.........................|lsdyna-kwordManager|
    7. Commands................................|lsdyna-commands|
       7.1 Miscellaneous commands..............|lsdyna-miscCommands|
           7.1.1 LsOffsetId....................|lsdyna-offsetId|
           7.1.2 LsManager.....................|lsdyna-lsManager|
           7.1.3 LsTags........................|lsdyna-lsTags|
           7.1.4 LsManual......................|lsdyna-lsManual|
           7.1.5 LsMakeMarkers.................|lsdyna-lsMarkers|
       7.2 Node commands.......................|lsdyna-nodeCommands|
           7.2.1 LsNodeScale...................|lsdyna-nodeScale|
           7.2.2 LsNodeRotate..................|lsdyna-nodeRotate|
           7.2.3 LsNodeTranslate...............|lsdyna-nodeTranslate|
           7.2.4 LsNodePos6p...................|lsdyna-nodePos6p|
           7.2.5 LsNodeMirror..................|lsdyna-nodeMirror|
           7.2.6 LsNodeReplace.................|lsdyna-nodeReplace|
       7.3 Element commands....................|lsdyna-elemCommands|
           7.3.1 LsElemFindPid.................|lsdyna-elemFindPid|
           7.3.2 LsElemChangePid...............|lsdyna-elemChangePid|
           7.3.3 LsElemReverseNormals..........|lsdyna-elemReverseNormals|
       7.4 Curve commands......................|lsdyna-curveCommands|
           7.4.1 LsCurveScale..................|lsdyna-curveScale|
           7.4.2 LsCurveOffset.................|lsdyna-curveOffset|
           7.4.3 LsCurveAddPoint...............|lsdyna-curveAddPoint|
           7.4.4 LsCurveResample...............|lsdyna-curveResample|
           7.4.5 LsCurveMirror.................|lsdyna-curveMirror|
           7.4.6 LsCurveCut....................|lsdyna-curveCut|
           7.4.7 LsCurveWrite..................|lsdyna-curveWrite|
       7.5 Encryption commands.................|lsdyna-encryptCommands|
           7.5.1 LsEncryptLines................|lsdyna-encryptLines|
           7.5.2 LsEncryptFile.................|lsdyna-encryptFile|
       7.6 Keyword commands....................|lsdyna-kwordCommands|
           7.6.1 LsKwordComment................|lsdyna-kwordComment|
           7.6.2 LsKwordDelete.................|lsdyna-kwordDelete|
    8. Mappings & functions....................|lsdyna-mappings|
       8.1 Mappings list.......................|lsdyna-mapList|
       8.2 Comment/uncomment...................|lsdyna-comment|
       8.3 Data line autoformating.............|lsdyna-autoFormat|
       8.4 Text objects........................|lsdyna-textObject|
       8.5 Tags................................|lsdyna-tags|
    9. Includes ...............................|lsdyna-includes|
       9.1 File name completions ..............|lsdyna-includeName|
       9.2 Open includes ......................|lsdyna-includeOpen|
       9.3 Include manager ....................|lsdyna-includeManager|
   10. License.................................|lsdyna-license|

================================================================================
1. Introduction                                            *lsdyna-introduction*

It is documentation for Ls-Dyna VIM filetype plugin.

Ls-Dyna is simulation software developed by Livermore Software Technology
Corporation (www.lstc.com). The plugin is designed to work with Ls-Dyna
keyword file used to store model information.

Ls-Dyna filetype plugin overview:
  - syntax highlighting
  - node/element/curve folding
  - omni-completion for keywords/parameters/options/ids
  - keyword manager
  - numerous commands to operate on model data
  - useful mappings and functions

================================================================================
2. Installation                                            *lsdyna-installation*

Requirements:
  - (g)VIM 8.0 or higher

Note: All plugin features were tested in gVIM 8.1 under Windows 10.

Recommended is to use VIM packages for installation. See ":help packages".

Single user installation:
-------------------------
1. Copy plugin files/directories to your home directory:
>
	$USERPROFILE%\vimfiles\pack\cae\start\vim-lsdyna
	$HOME/.vim/pack/cae/start/vim-lsdyna
<
For example whole plugin structure might looks like this:
>
    C:\Users\bartosz\vimfiles\cae\start\vim-lsdyna\autoload\
    C:\Users\bartosz\vimfiles\cae\start\vim-lsdyna\colors\
    C:\Users\bartosz\vimfiles\cae\start\vim-lsdyna\doc\
    C:\Users\bartosz\vimfiles\cae\start\vim-lsdyna\ftdetect\
    C:\Users\bartosz\vimfiles\cae\start\vim-lsdyna\ftplugin\
    C:\Users\bartosz\vimfiles\cae\start\vim-lsdyna\keywords\
    C:\Users\bartosz\vimfiles\cae\start\vim-lsdyna\syntax\
<
Multi user installation:
------------------------
It is possible to load plugin from one place for many users.

1. Copy plugin files to place where all users have access:
>
	\\networkShare\Software\VIM\plugins\lsdyna\
<
2. Add line to VIM configuration file (vimrc) for all users:
>
	setlocal packpath+=\\networkShare\Software\VIM\plugins\lsdyna\
<
--------------------------------------------------------------------------------

By default VIM does not use any filetype plugins.
To use any you must add following lines to vimrc file:
>
	filetype plugin on
	syntax on
<
The plugin loads automatic for files with extension:
  - *.k
  - *.key
  - *.inc
  - *.asc

To load the plugin manually use:
>
	:set filetype=lsdyna
<
To check if the plugin is loaded into VIM use:
>
	:set filetype?
<
================================================================================
3. Syntax highlighting                                           *lsdyna-syntax*

Syntax highlighting supports:
  - keyword line (start with "*")
  - comment line (start with "$")
  - title line
  - data line

The plugin supports three types of data line syntax highlighting:
1) 1x8, 3x16, 2x8 fields
   - *NODE
   - *AIRBAG_REFERENCE_GEOMETRY
2) 10x8 fields
   - *ELEMENT_
   - *AIRBAG_SHELL_REFERENCE_GEOMETRY
3) 8x10 fields
   - *PART
   - *SECTION
   - *MAT
   - ...

================================================================================
4. Folding                                                      *lsdyna-folding*

All lines not started with "*" (keyword lines) or "$" (comment lines) are folded.
Minimal number of lines to fold is four. In practise node/element lines and
curves data points with more than four lines are folded. To break folding put
comment line.

VIM folding is very powerful feature, if you never used it please read
documentation chapter about it "help usr_28.txt".

================================================================================
5. Ls-Dyna omni-completion                                 *lsdyna-completeOmni*

Ls-Dyna omni-completion is trigged with <Tab> or <Shift-Tab>.
<Tab> search only in current buffer, <Shift-Tab> search in all include files.

NOTE:
VIM might have a problem with <Tab> mapping in terminal.
You can use <Ctrl-x><Ctrl-o> and <Ctrl-x><Ctrl-q> in this case.

Completion types:
1. keyword (*NODE, *ELEMENT_, ...)
2. keyword option (elform, dof, vad, ...)
3. id (part, section, material, set, curve, ...)
4. parameter (strings starting with "&" sign)

--------------------------------------------------------------------------------
5.1 Keyword completion                                  *lsdyna-completeKeyword*

Keyword completion adds a new keyword to your inputdeck.

In insert mode start typing keyword name and complete with <Tab>.
Menu with available keywords will pop up and you can choose a keyword you want
to add to a model.

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*pa<Tab>                                     |
    |$                                            |
    |~                                            |
    |~                                            |
    |~                                            |
    |~                                            |
    |~                                            |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*pa                                          |
    ||parameter            |                      |
    ||parameter_expression |                      |
   >||part                 |<Enter>               |
    ||part_inertia         |                      |
    |+--------------------++                      |
    |~                                            |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*PART                                        |
    |$#title                                      |
    |?title?                                      |
    |$#      pid     secid       mid              |
    |          ?         ?         ?              |
    |$                                            |
    |~                                            |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+

Note:
- keyword name must start in first column
- asterisk sign '*' at the beginning is not mandatory
- keyword name is not case sensitive

The same way you can add keyword templates. The template is defined as: 
1. Predefined keyword
   - keyword with predefined values like
     - gravity load for different system unit
     - contact definition with non-default values
   - stored in the library subdirectories
2. Templates
   - group of keywords
     - like master deck with *CONTROL_ and *DATABASE_ keywords
   - stored in "_" subdirectory in the library
   - template file names must start with "_"
   - to insert a template from the library use _<Tab>

--------------------------------------------------------------------------------
Extending library:

Location of keyword library is set by global variable "g:lsdynaLibKeywordsPath".
Variable value is string with paths separated with coma sign.
By default the variable points to "keywords" directory in the plugin package.

Keyword library structure:
>
	- lsdyna                   -> main plugin level
	  - keywords               -> keyword library
	    - _                    -> templates subdirectory
	    - a
	    - b
	    - p                    -> p-keywords subdirectory
	      - part.k
	      - part_contact.k     -> keyword definition
	      - part_inertia.k
	      - ...
	    - s                    -> s-keywords subdirectory
	      - section_shell.k
	      - section_solid.k    -> keyword definition
	      - section_beam.k
	      - ...
	    - ...
<
To extend library with new keywords you can add a new *.k file with specific
content to default library or you can set "g:lsdynaLibKeywordsPath" variable
in vimrc file with path to new location.
>
  let g:lsdynaLibKeywordsPath='C:\cae\lsdyna\lib_mat\,C:\cae\lsdyna\lib_contact\'
<
Note:
- all keywords from default library are always available 
- all files with *.k extension found in new paths and their subdirectories
  will be used

Library naming rules:
- file name is used as completion string
- file names must be lowercase
- do not use any white signs
- *.k extension is mandatory

--------------------------------------------------------------------------------
5.2 Keyword option completion                            *lsdyna-completeOption*

Keyword options completion let you in easy way set keyword options like "dof"
or "vad" in *BOUNDARY_PRESCRIBED_MOTION_ or "elform" in *SECTION_.

Set cursor position at option field and trigger completion with <Tab>:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*BOUNDARY_PRESCRIBED_MOTION_NODE             |
    |$#  typeid       dof       vad      lcid     |
    |          <Tab>                              |
    |         >|        1 x-translation |<        |
    |          |        2 y-translation |         |
    |          |        3 z-translation |         |
    |          +------------------------+         |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*BOUNDARY_PRESCRIBED_MOTION_NODE             |
    |$#  typeid       dof       vad      lcid     |
    |                   1<Tab>                    |
    |                    |        0 acceleration ||
    |                    |        1 velocity     ||
    |                   >|        2 displacement ||
    |                    +-----------------------+|
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

Note:
- the feature works only for keywords with header (dof, vad, ...)
- in case the option is not detected part/set id completion is used
- list of all options are stored in "lsdyna_dict.vim" file

--------------------------------------------------------------------------------
5.3 Id completion                                            *lsdyna-completeId*

Depend on cursor position and ls-dyna header (pid, sid, mid, ...) the plugin
gives you ids of items like parts, sections, materials, ...

For "lcid" field list of *DEFINE_CURVE ids will be returned

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*BOUNDARY_PRESCRIBED_MOTION_NODE             |
    |$#  typeid       dof       vad      lcid     |
    |                   1         2<Tab>          |
    |                              |       10 Gravity_load |
    |                             >|      100 Movement     |<
    |                              |     1000 Hardening    |
    |                              +-----------------------+
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

For "typeid" list of all parts and sets will be given (S - set, P - part)

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*BOUNDARY_PRESCRIBED_MOTION_NODE             |
    |$#  typeid       dof       vad      lcid     |
    |<Tab>              1         2        10     |
    | |       10 S Load    |<                     |
    | |       20 S Fix     |                      |
    | |        3 P Support |                      |
    | |        4 P Plate   |                      |
    | |       10 P Bracket |                      |
    | +--------------------+                      |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

Id prefix is used for completion, here only ids starting with '1' will
complete:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*BOUNDARY_PRESCRIBED_MOTION_NODE             |
    |$#  typeid       dof       vad      lcid     |
    | 1<Tab>            1         2        10     |
    ||       10 S Load    |<                      |
    ||       10 P Bracket |                       |
    |+--------------------+                       |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

Keyword title can be used for for completion as well:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*BOUNDARY_PRESCRIBED_MOTION_NODE             |
    |$#  typeid       dof       vad      lcid     |
    | lo<Tab>           1         2        10     |
    ||       10 S Load    |<                      |
    |+--------------------+                       |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*BOUNDARY_PRESCRIBED_MOTION_NODE             |
    |$#  typeid       dof       vad      lcid     |
    |                   1         2 grav<Tab>     |
    |                              |       10 Gravity_load |
    |                              +-----------------------+
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

Note:
- id completion is trigged from normal and insert mode
- for unknown header list of parts and sets is returned (id completion)
- <Tab> search for all ids in current buffer
- <Shift-Tab> search for all ids in all *INCLUDE paths
- performance of completion depends on number of includes and their sizes

--------------------------------------------------------------------------------
5.4 Parameter completion                              *lsdyna-completeParameter*

Ls-Dyna omni completion let you complete parameters.

Parameter list includes:
- parameter name
- parameter type (R, I, C)
- parameter value

Start typing name with "&" sign and complete with <Tab>:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*PARAMETER                                   |
    |$#    name       val                         |
    |R   thkTop       2.7                         |
    |R  thkDown       1.5                         |
    |I   intPnt         5                         |
    |*PARAMETER_EXPRESSION                        |
    |$#    name val                               |
    |R area10mm 3.14*10.0**2                      |
    |R area15mm 3.14*15.0**2                      |
    |$                                            |
    |$------------------------------------------- |
    |$                                            |
    |*SECTION_SHELL_TITLE                         |
    |$# title                                     |
    |Top_shell                                    |
    |$#   secid    elform      shrf       nip     |
    |       100        16     0.833         2     |
    |$#      t1        t2        t3        t4     |
    | &th<Tab>                                    |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*PARAMETER                                   |
    |$#    name       val                         |
    |r   thkTop       2.7                         |
    |rthkBottom       1.5                         |
    |iintPoints         5                         |
    |*PARAMETER_EXPRESSION                        |
    |$#    name val                               |
    |R area10mm 3.14*10.0**2                      |
    |R area15mm 3.14*15.0**2                      |
    |$                                            |
    |$------------------------------------------- |
    |$                                            |
    |*SECTION_SHELL_TITLE                         |
    |$# title                                     |
    |Top_shell                                    |
    |$#   secid    elform      shrf       nip     |
    |       100        16     0.833         2     |
    |$#      t1        t2        t3        t4     |
    | &thk<Tab>                                   |
    | |thkTop    R 2.7      |                     |
    | |thkDown   R 1.5      |                     |
    | +---------------------+                     |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

To get list of all parameters use only "&" <Tab>:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*PARAMETER                                   |
    |$#    name       val                         |
    |r   thkTop       2.7                         |
    |rthkBottom       1.5                         |
    |iintPoints         5                         |
    |*PARAMETER_EXPRESSION                        |
    |$#    name val                               |
    |R area10mm 3.14*10.0**2                      |
    |R area15mm 3.14*15.0**2                      |
    |$                                            |
    |$------------------------------------------- |
    |$                                            |
    |*SECTION_SHELL_TITLE                         |
    |$# title                                     |
    |Top_shell                                    |
    |$#   secid    elform      shrf       nip     |
    |       100        16     0.833         2     |
    |$#      t1        t2        t3        t4     |
    | &<Tab>                                      |
    | |thkUp     R 2.7          |                 |
    | |thkDown   R 1.5          |                 |
    | |intPoints I 5            |                 |
    | |area10mm  R 3.14*10.0**2 |                 |
    | |area15mm  R 3.14*10.0**2 |                 |
    | +-------------------------+                 |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

Note:
- parameter completion is trigged for any string starting with "&"
- <Tab> search for all parameters in current buffer
- <Shift-Tab> search for all parameters in all *INCLUDE paths
- performance of completion depends on number of includes and their sizes

================================================================================
6. Keyword manager                                         *lsdyna-kwordManager*

Keyword manager (LsManager) create list of specific keywords (parts, sets, ...)
and show it in separate window. You can use this list to get quick model
overview and jump to specific place in model. The manager has also limited
number of tools to manage keywords in your model.

The manager is trigged with command ":LsManager". See |lsdyna-lsManager| for
details.

In the simplest case is just ":LsManager" command followed by keyword name.

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*PART                                        |
    |$#title                                      |
    |Part_01                                      |
    |$#      pid     secid       mid              |
    |          1         1         1              |
    |*PART                                        |
    |$#title                                      |
    |Part_02                                      |
    |$#      pid     secid       mid              |
    |          2         1         1              |
    |$                                            |
    |LsManager====================================|
    | 1.   1 Part_01                              |
    | 2.   2 Part_02                              |
    |$                                            |
    |command-line=================================+
    |:LsManager part                              | <command>
    +---------------------------------------------+

In example above manager set list with *PART keywords.
In example below we are looking for all *INCLUDE keywords.

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*INCLUDE                                     |
    |../00_inc/include_A.inc                      |
    |*INCLUDE                                     |
    |../00_inc/include_B.inc                      |
    |*INCLUDE_TRANSFORM                           |
    |../00_inc/include_C.inc                      |
    |$                                            |
    |LsManager====================================|
    | 1. include_A.inc     |                      |
    | 2. include_B.inc     |                      | <-- has other includes
    | 3.   include_B1.inc  | error                | <-- include cannot be found
    | 4.   include_B2.inc  |                      |
    | 5. include_C.inc     | TRANSFORM            | <-- use _TRANSFORM option
    |$                                            |
    |command-line=================================+
    |:LsManager! include                          |<command>
    +---------------------------------------------+

Above we used "bang" option to tell the manager to look recursive for all
includes not only in current buffer. See how it looks w/o "bang" switch.

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*INCLUDE                                     |
    |../00_inc/include_A.inc                      |
    |*INCLUDE                                     |
    |../00_inc/include_B.inc                      |
    |*INCLUDE_TRANSFORM                           |
    |../00_inc/include_C.inc                      |
    |$                                            |
    |LsManager====================================|
    | 1. include_A.inc     |                      |
    | 2. include_B.inc     |                      |
    | 3. include_C.inc     | TRANSFORM            |
    |$                                            |
    |command-line=================================+
    |:LsManager include                           |<command>
    +---------------------------------------------+

"bang" switch can be used with any keyword:
:LsManager  define_curve --> look for *DEFINE_CURVE in current buffer only
:LsManager! define_curve --> look for *DEFINE_CURVE in all includes

The manager layout might look different depend on keyword type. Here is a
example with *PARAMETER keywords: 

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*PARAMETER                                   |
    |R par01 1.0                                  |
    |I par02 2                                    |
    |*PARAMETER_LOCAL                             |
    |R par03 3.0                                  |
    |*PARAMETER_EXPRESSION                        |
    |R par04 4.0 + par01                          |
    |*PARAMETER                                   |
    |R par01 1.1                                  |
    |*PARAMETER_EXPRESSION_LOCAL                  |
    |R par04 4.0 + (par01 * -1.0)                 |
    |$                                            |
    |LsManager====================================|
    | 1. R par01 = 1.0                    | [   ] |
    | 2. I par02 = 2                      | [   ] |
    | 3. R par03 = 3.0                    | [L  ] |
    | 4. R par04 = 5.0 : 4.0 + par01      | [ E ] |
    | 5. R par01 = 1.1                    | [   ] |
    | 6. R par04 = 3.0 : 4.0+(par01*-1.0) | [LED] |
    |$                                            |
    |command-line=================================+
    |:LsManager parameter                         |<command>
    +---------------------------------------------+

Each parameter is marked with a flag:
- L : local
- E : expression
- D : duplicated

--------------------------------------------------------------------------------
LsManager commands

LsManager window support predefined list of normal commands.

Basic commands:
 <ESC>      : close LsManager window and put cursor on selected keyword
 <Enter>    : close LsManager window and jump to selected keyword

Note: It makes difference only for *INCLUDE keywords.

Move commands:
 <j>/<Down> : select next item (move one line down)
 <k>/<Up>   : select previous item (move one line up)
 </>pattern : search specific name on the list
 <xG>/<:x>  : jump to x item (line)

Filter commands:
 <f> : filter inclusive the list
 <F> : filter exclusive the list
 <u> : undo filter

Includes commands:
 <gf> : open include in current buffer, the same as <Enter>
 <gF> : open include in split window
 <gt> : open include in new tab
 <gT> : open include in new tab in background
 <R>  : rename include file (rename file on disc)
 <r>  : rename include file path (change *INCLUDE keyword, does not touch file)
 <C>  : copy include file (copy file on disc)
 <D>  : delete include file (deletes file from disc)

--------------------------------------------------------------------------------
LsManager mappings

The manager is trigged by ex like command but to speed up work some normal
commands are available as normal mappings.

Mappings rules:
- mapping is always two or three key
- first key is <F12> or <Shift-F12>
  - <F12> acts like ":LsManager" (search in current buffer)
  - <Shift-F12> acts as ":LsManager!" (search in all includes)
- the second key is letter(s) to describe Ls-Dyna keyword
- if keywords start with the same letter (like *SET and *SECTION) key modifiers
  are used (Shift, Ctrl)
- in same cases two letters description is used to distinguish between keywords 

Sounds complicated but in real work it is not ... just hit <F12> and next first
letter of keyword. You want to list of *PART hit <F12> and next <p>, you want
*SECTION list hit <F12> and <s>, for *MAT hit <F12> and <m>. If you want
collect all *MAT in all includes use <Shift-F12> and <m>, *LOAD in all includes
... no problem ... <Shift-F12> and <l> do the magic.

How to get list of *SET? Well, <F12><s> is already used for *SECTION so it
must be <s> but with some modifier, <F12><Shift-S> gives *SET and
<F12><Ctrl-s> gives *SENSOR. 

In case of *DEFINE_ keywords two letter is used to describe keyword:
- <F12><dc> --> *DEFINE_CURVE
- <F12><dC> --> *DEFINE_COORDINATE
- <F12><dv> --> *DEFINE_VECTOR
- <F12><dt> --> *DEFINE_TRANSFORMATION

Special mappings (the same list apply to <Shift-F12>):
- <F12><*>   : list all keywords (":LsManager *")
- <F12><.>   : show last search list ("." coma normal command in VIM
               repeat the last command)
- <F12></>   : search for specific keyword ("/" is VIM normal command for
               search)
- <F12><F12> : favorite command, it is the fastest combination to type,
               the idea is a user can set to most often used search,
               by default is set for includes search (<F12><i>)
- <F12><Shift-i> : show last include search

Note:
To get list of all mappings use command ":nmap <F12>".

================================================================================
6. Commands                                                    *lsdyna-commands*

The plugin has many useful commands to work with Ls-Dyna keyword file.
Commands are defined like VIM ex command (starts with ":" option).

Naming convection:
Command name has three parts:
1. prefix : all commands starts with "Ls" prefix
2. group  : define command specialization
            - Node  : for nodes
            - Elem  : for elements
            - Curve : for curves
            - Misc  : works with many keywords
            - ...
3. action : command action

Command examples:
- LsNodeTranslate : translate node coordinates
- LsElemChangePid : change element part id
- LsCurveScale    : scale curve values

Eacg command has abbreviation, upper case letters from name:
- LsNodeTranslate : lnt<Space>
- LsElemChangePid : lec<Space>
- LsCurveScale    : lcs<Space>

Most of the commands use [range] to set lines on which the action
will be executed. Here we execute 'LsCurveScale' on lines from 10 to 20:
>
	:10,20LsCurveScale 1.0 1.0
>
Explicit definition of [range] is not user friendly. Better idea is to use
VIM normal command "V" for lines selection and use ":" to start VIM command mode.
VIM will select [range] with selection markers '< and '>. They are first
and last line number from selection.

--------------------------------------------------------------------------------
7.1 Miscellaneous commands                                 *lsdyna-miscCommands*

--------------------------------------------------------------------------------
7.1.1 LsOffsetId                                              *lsdyna-offsetId*

Description:
  Offset ids under misc keywords (*NODE, *ELEMENT_, *SET_).

Syntax:
  :[range]LsOffsetId [enp] offset

Arguments:
  [nep]  : flag for offset
           n : offset node id
           e : offset element id
           p : offset part id
  offset : offset value
 
  Offset flags can be collected in one:
    en  : offset element and node id
    pe  : offset part and element id
    nep : offset node, element and part id
 
   Order of arguments is unimportant. "en" and "ne" works the same.
   Keyword and comment lines are ignored.
 
Abbreviation:
  :loi<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
   >|       1     1.0     1.0     1.0             |<visual line selection>
   >|       2     2.0     2.0     2.0             |<visual line selection>
   >|       3     3.0     3.0     3.0             |<visual line selection>
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsOffsetid n 1000
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
    |    1000     1.0     1.0     1.0             |
    |    1000     2.0     2.0     2.0             |
    |    1000     3.0     3.0     3.0             |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*ELEMENT_SHELL                               |
    |$#   eid     pid    n1     n2     n3     n4  |
   >|       1      10     1      2      3      4  |<visual line selection>
   >|       2      10     5      6      7      8  |<visual line selection>
   >|       3      11     9     10     11     12  |<visual line selection>
   >|       4      11    13     14     15     16  |<visual line selection>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsOffsetid p 500
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*ELEMENT_SHELL                               |
    |$#   eid     pid    n1     n2     n3     n4  |
    |       1     510     1      2      3      4  |
    |       2     510     5      6      7      8  |
    |       3     511     9     10     11     12  |
    |       4     511    13     14     15     16  |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsOffsetid pen 2000
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*ELEMENT_SHELL                               |
    |$#   eid     pid    n1     n2     n3     n4  |
    |    2001    2010  2001   2002   2003   2004  |
    |    2002    2010  2005   2006   2007   2008  |
    |    2003    2011  2009   2000   2011   2012  |
    |    2004    2011  2013   2014   2015   2016  |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.1.2 LsManager                                               *lsdyna-lsManager*

Description:
  Manage list of keywords in a model.
  For detail explanation of LsManager please see chapter 6 |lsdyna-lsManager|

Syntax:
  :LsManager[!] keyword

Arguments:
  keyword  : ls-dyna keyword name for listing
             - asterisk sign '*' is optional (*PART & PART works the same)
             - name is not case sensitive (*PART & *part works the same)
             - full name is not required, matching is from beginning of the string
               - define --> match all *DEFINE_ keywords
               - define_curve --> match all *DEFINE_CURVE
               - define_c --> match all *DEFINE_CURVE and *DEFINE_COORDINATE
  bang '!' : scan all includes not only current buffer

Abbreviation:
  :lm<Space>
  :lm!<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*PART                                        |
    |$#title                                      |
    |Part_01                                      |
    |$#      pid     secid       mid              |
    |          1         1         1              |
    |*PART                                        |
    |$#title                                      |
    |Part_02                                      |
    |$#      pid     secid       mid              |
    |          2         1         1              |
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:LsManager part
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*PART                                        |
    |$#title                                      |
    |Part_01                                      |
    |$#      pid     secid       mid              |
    |          1         1         1              |
    |*PART                                        |
    |$#title                                      |
    |Part_02                                      |
    |$#      pid     secid       mid              |
    |          2         1         1              |
    |$                                            |
    |LsManager====================================|
    | 1.   1 Part_01                              |
    | 2.   2 Part_02                              |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.1.3 LsTags                                                      *lsdyna-lsTags*

Description:
  Create keywords tag list.
  For detail explanation of LsManager please see |lsdyna-tags|

Syntax:
  :LsTags[!] keyword

Arguments:
  bang '!' : scan all includes not only current buffer

Abbreviation:
  :lt<Space>
  :lt!<Space>

Normal mappings:
  <F11>   : LsTags
  <S-F11> : LsTags!

--------------------------------------------------------------------------------
7.1.4 LsManual                                                  *lsdyna-lsManual*

Description:
  Open Ls-Dyna pdf manual at page with specific keyword.

  Requriments:
  - Windows operating system
  - Adobe Acrobat Reader
  - Ls-Dyna R9.0 pdf manual files

  Configuration:
  - set in 'vimrc' file variable 'g:lsdynaPathAcrobat' to path with Adobe
    Acrobat Reader, by default it is set to:
    "C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd32.exe"'
  - download following manual files and put them into 'manuals' directory 
    http://ftp.lstc.com/anonymous/outgoing/jday/manuals/LS-DYNA_Manual_Volume_I_R9.0.pdf
    http://ftp.lstc.com/anonymous/outgoing/jday/manuals/LS-DYNA_Manual_Volume_II_R9.0.pdf
    http://ftp.lstc.com/anonymous/outgoing/jday/manuals/LS-DYNA_Manual_Volume_III_R9.0.pdf

Syntax:
  :LsManual keyword

Arguments:
  keyword : keyword name

Abbreviation:
  None

Normal mappings:
  <F1> : opens manual for keyword under the cursor

Example:
  :LsManual part
  :LsManual *section_shell
  :LsManual MAT_FABRIC

--------------------------------------------------------------------------------
7.1.5 LsMakeMarkers                                           *lsdyna-lsMarkers*

Description:
  Create mesh with markers at specific coordinates.
  Marker coordinates are read from current buffer:
  - lines starting with '*' and '$' are ignored
  - one coordinate per line
  - default delimiter is ' ' (space sign)
  - 1st column is optional and used as marker name

Syntax:
  :[range]LsMakeMarkers [delimiter]

Arguments:
  range      : by default all lines in current buffer are used
  delimiter  : delimiter used to split line (like ',', ';', ...) 
               if not set default ' ' is used

Abbreviation:
  :lmm<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
    |$ Dummy H-point                              |
    |       1    10.0      0.0  -20.0             |
    |$ Head COG                                   |
    |       2    11.0      0.0  -21.0             |
    |$ Right knee                                 |
    |       3    12.0      0.0  -22.0             |
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:LsMakeMarkers
<
    +---------------------------------------------+
    |lsdyna_model_markers.key=====================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
    |       1    10.0      0.0  -20.0             |
    |...                                          |
    |     100    11.0      0.0  -21.0             |
    |*ELEMENT_SHELL                               |
    |$#   eid      n1      n1      n3      n4     |
    |       1       1       2       3       4     |
    |...                                          |
    |     101     101     102     103     104     |
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

Example with csv format:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    | marker1, 10.0, 0.0, -20.0                   |
    | marker2, 11.0, 0.0, -21.0                   |
    | marker3, 12.0, 0.0, -22.0                   |
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:LsMakeMarkers ,
<
--------------------------------------------------------------------------------
7.2 Node commands                                          *lsdyna-nodeCommands*

Node commands are designed to work with data lines under *NODE keyword.
Keyword lines (starts with '*') and comment lines (starts with '$') are
ignored in selection.

--------------------------------------------------------------------------------
7.2.1 LsNodeScale                                             *lsdyna-nodeScale*

Description:
  Scale node coordinates.

Syntax:
  :[range]LsNodeScale x y z

Arguments:
  x - x coord. scale factor
  y - y coord. scale factor
  z - z coord. scale factor

Abbreviation:
  :lns<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
   >|       1   0.001   0.001   0.001             |<visual line selection>
   >|       2   0.002   0.002   0.002             |<visual line selection>
   >|       3   0.003   0.003   0.003             |<visual line selection>
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsNodeScale 1000.0 1000.0 1000.0
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
    |       1     1.0     1.0     1.0             |
    |       2     2.0     2.0     2.0             |
    |       3     3.0     3.0     3.0             |
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.2.2 LsNodeRotate                                           *lsdyna-nodeRotate*

Description:
  Rotate nodes by defined angle respect to defined vector.

Syntax:
  :[range]LsNodeRotate a1 a2 a3 a4 a5 a6 a7

Arguments:
  a1 - x part of rotation vector
  a2 - y part of rotation vector
  a3 - z part of rotation vector
  a4 - x coordinate of rotation point
  a5 - y coordinate of rotation point
  a6 - z coordinate of rotation point
  a7 - rotation angle (degrees)
  Note: They are the same as in *DEFINE_TRANSFORMATION, ROTATE keyword.  

Abbreviation:
  None (lnr is used by LsNodeReplace command).

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
   >|       1     1.0     1.0     1.0             |<visual line selection>
   >|       2     2.0     2.0     2.0             |<visual line selection>
   >|       3     3.0     3.0     3.0             |<visual line selection>
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsNodeRotate 0.0 0.0 1.0 0.0 0.0 0.0 30.0
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
    |       1 0.36602 1.36602     1.0             |
    |       2 0.73205 2.73205     2.0             |
    |       3 1.09807 4.09807     3.0             |
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.2.3 LsNodeTranslate                                     *lsdyna-nodeTranslate*

Description:
  Translate node coordinates in x, y, z direction.

Syntax:
  :[range]LsNodeTranslate x y z

Arguments:
  x - x translation value
  y - y translation value
  z - z translation value

Command abbreviation:
  :lns<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
   >|       1     1.0     1.0     1.0             |<visual line selection>
   >|       2     2.0     2.0     2.0             |<visual line selection>
   >|       3     3.0     3.0     3.0             |<visual line selection>
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsNodeTranslate 10.0 0.0 -20.0
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
    |       1    11.0     1.0   -19.0             |
    |       2    12.0     2.0   -18.0             |
    |       3    13.0     3.0   -17.0             |
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.2.4 LsNodePos6p                                             *lsdyna-nodePos6p*

Description:
 Set position using 6 points. Position is made from P1-P2-P3 to P4-P5-P6.

Syntax:
  :[range]LsNodePos6p p1x p1y p1z p2x p2y p2z p3x p3y p3z p4x p4y p4z p5x p5y p5z p6x p6y p6z

Arguments:
  p1x - P1 x-coord
  p1y - P1 y-coord
  p1z - P1 z-coord
  p2x - P2 x-coord
  p2y - P2 y-coord
  p2z - P2 z-coord
  p3x - P3 x-coord
  p3y - P3 y-coord
  p3z - P3 z-coord
  p4x - P4 x-coord
  p4y - P4 y-coord
  p4z - P4 z-coord
  p5x - P5 x-coord
  p5y - P5 y-coord
  p5z - P5 z-coord
  p6x - P6 x-coord
  p6y - P6 y-coord
  p6z - P6 z-coord
  Note: They are the same as in *DEFINE_TRANSFORMATION, POS6P keyword.  

Command abbreviation:
  :lnp<Space>

--------------------------------------------------------------------------------
7.2.5 LsNodeMirror                                           *lsdyna-nodeMirror*

Description:
  Reflect nodes respect to defined plane and point.

Syntax:
  :[range]LsNodeMirror plane point

Arguments:
  plane - plane definition
  point - point coordinate which the plane pass
  
  Plane definition can be vector normal to user plane ("x", "y", "z") or plane
  description ("xy", "xz", "yz"). Both "xy" and "yx" are accepted and works the
  same.

Command abbreviation:
  :lnm<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
   >|       1     1.0     1.0     1.0             |<visual line selection>
   >|       2     2.0     2.0     2.0             |<visual line selection>
   >|       3     3.0     3.0     3.0             |<visual line selection>
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsNodeMirror y 0.0
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
    |       1     1.0    -1.0     1.0             |
    |       2     2.0    -2.0     2.0             |
    |       3     3.0    -3.0     3.0             |
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
--------------------------------------------------------------------------------
7.2.6 LsNodeReplace                                         *lsdyna-nodeReplace*

Description:
  Replace node coordinates from external file to current buffer

Syntax:
  :[range]LsNodeReplace [offset] file

Arguments:
  offset - optional argument to set node id offset between files
  file   - path to external file

  Note:
  When executed with no [range] all nodes in current buffer will be processed.

Command abbreviation:
  :lnr<Space>

Example:

    +---------------------------------------------+
    |presim.key===================================| <-- file with deformed
    |$                                            |     mesh
    |*NODE                                        |
    |$#   nid       x       y       z             |
    |       1    11.0    32.0   -10.0             |
    |       2    13.0    22.0    -5.0             |
    |       3     7.0     1.0     0.0             |
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
    |       1     1.0     1.0     1.0             |
    |       2     2.0     2.0     2.0             |
    |       3     3.0     3.0     3.0             |
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:LsNodeReplace ./presim.key
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*NODE                                        |
    |$#   nid       x       y       z             |
    |       1    11.0    32.0   -10.0             | <-- node coord. from presim.key file
    |       2    13.0    22.0    -5.0             | <-- node coord. from presim.key file
    |       3     7.0     1.0     0.0             | <-- node coord. from presim.key file
    |$                                            |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.3 Element commands                                       *lsdyna-elemCommands*

Element commands are design to work with data lines under *ELEMENT_ keyword.
Keyword lines (starts with '*') and comment lines (starts with '$') are
ignored in selection.

--------------------------------------------------------------------------------
7.3.1 LsElemFindPid                                         *lsdyna-elemFindPid*

Description:
  Find all elements with specific part id in element table.

Syntax:
  :[range]LsElemFindPid [pid]

Arguments:
  pid - optional part id
        With no argument it sorts elements table by part id.
        Mulitiply items and ranges are supported:
          :LsElemFindPid 100
          :LsElemFindPid 5 100 200
          :LsElemFindPid 1 10:99 200

Abbreviation:
  :lef<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*ELEMENT_SHELL                               |
    |$#   eid     pid    n1     n2     n3     n4  |
   >|       1    2000     1      2      3      4  |<visual line selection>
   >|       2    1000     5      6      7      8  |<visual line selection>
   >|       3    3000     9     10     11     12  |<visual line selection>
   >|       4    2000    13     14     15     16  |<visual line selection>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsElemFindPid
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*ELEMENT_SHELL                               |
    |$#   eid     pid    n1     n2     n3     n4  |
    |$ Part:     1000                             | <-- Pid 1000 group
    |       2    1000     5      6      7      8  |
    |$ Part:     2000                             | <-- Pid 2000 group
    |       1    2000     1      2      3      4  |
    |       4    2000    13     14     15     16  |
    |$ Part:     3000                             | <-- Pid 3000 group
    |       3    3000     9     10     11     12  |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.3.2 LsElemChangePid                                     *lsdyna-elemChangePid*

Description:
  Change part id in element definition.

Syntax:
  :[range]LsElemChangePid [oldPid] newPid

Arguments:
  newPID : new part id
  oldPID : part id to change (optional)
           If not set all part ids are set to new part id value.
  
  Note: Parameter names can be used.
 
Abbreviation:
  :lec<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*ELEMENT_SHELL                               |
    |$#   eid     pid    n1     n2     n3     n4  |
   >|       1      10     1      2      3      4  |<visual line selection>
   >|       2      10     5      6      7      8  |<visual line selection>
   >|       3      20     9     10     11     12  |<visual line selection>
   >|       4      20    13     14     15     16  |<visual line selection>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:LsElemChangePid 20 1000
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*ELEMENT_SHELL                               |
    |$#   eid     pid    n1     n2     n3     n4  |
    |       1      10     1      2      3      4  |
    |       2      10     5      6      7      8  |
    |       3    1000     9     10     11     12  |
    |       4    1000    13     14     15     16  |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:LsDynaChangePID 10 pid1
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*ELEMENT_SHELL                               |
    |$#   eid     pid    n1     n2     n3     n4  |
    |       1   &pid1     1      2      3      4  |
    |       2   &pid1     5      6      7      8  |
    |       3      20     9     10     11     12  |
    |       4      20    13     14     15     16  |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.3.3 LsElemReverseNormals                           *lsdyna-elemReverseNormals*

Description:
  Reverse element normal orientation (2nd and 4th node are swapped). 
  Only tria and quad elements are supported.

Syntax:
  :[range]LsElemReverseNormals

Arguments:
  None

Abbreviation:
  :ler<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*ELEMENT_SHELL                               |
    |$#   eid     pid    n1     n2     n3     n4  |
   >|       1       1     1      2      3      4  |<visual line selection>
   >|       2       1     5      6      7      8  |<visual line selection>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsElemReverseNormals
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*ELEMENT_SHELL                               |
    |$#   eid     pid    n1     n2     n3     n4  |
    |       1       1     1      4      3      2  |
    |       2       1     5      8      7      6  |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.4 Curve commands                                        *lsdyna-curveCommands*

Curve commands are to work with x & y points under *DEFINE_CURVE keyword.
You can do operation like scaling or shifting of the points.

All curve commands unified number format of your points. First x-value control
how all points will be print into the file after operation. See example below:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
   >|            0.00e+00                 0.0     |<visual line selection>
   >|                 1.0                 1.0     |<visual line selection>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsCurveScale 10.0 5.0
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |            0.00e+00            0.00e+00     |
    |            1.00e+01            5.00e+00     |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

You can use curve command to change number format only.
Just update first x value and scale it with factors of 1.0.

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
   >|          0.0000e+00                 0.0     |<visual line selection>
   >|                 1.0                 1.0     |<visual line selection>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsCurveScale 1.0 1.0
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |          0.0000e+00          0.0000e+00     |
    |          1.0000e+00          1.0000e+00     |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

Note:
Always keep in mind that format of first x value is important!
In some situations you can loose the data!

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
   >|                 0.0                 0.0     |<visual line selection>
   >|               0.001               0.005     |<visual line selection>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsCurveScale 1.0 1.0
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |                 0.0                 0.0     |
    |                 0.0                 0.0     | <-- we lost data here!
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.4.1 LsCurveScale                                           *lsdyna-curveScale*

Description:
  Scale x and y value of the curve.

Syntax:
  :[range]LsCurveScale x y

Arguments:
  x - scaling factor for x
  y - scaling factor for y

Abbreviation:
  :lcs<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
   >|                 0.0                 0.0     |<visual line selection>
   >|                 1.0                 1.0     |<visual line selection>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsCurveScale 10.0 5.0
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |                 0.0                 0.0     |
    |                10.0                 5.0     |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.4.2 LsCurveOffset                                         *lsdyna-curveOffset*

Description:
Offset x and y values of the curve.

Syntax:
:[range]LsCurveShift xoff yoff

Arguments:
  xoff - offset value for x
  yioff - offset value for y

Abbreviation:
:lco<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
   >|                 0.0                 0.0     |<visual line selection>
   >|                 1.0                 1.0     |<visual line selection>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsCurveOffset 10.0 5.0
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |                10.0                 5.0     |
    |                11.0                10.0     |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.4.3 LsCurveAddPoint                                     *lsdyna-curveAddPoint*

Description:
  Add a new (x,y) point with x-value defined by the user. Y-value is linear
  interpolated for neighbour points.

Synatx:
  :[range]LsCurveAddPoint x

Arguments:
  x - new x-value

Command abbreviation:
  :lca<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
   >|                 0.0                 0.0     |<visual line selection>
   >|                 2.0                 4.0     |<visual line selection>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsCurveAddPoint 0.5
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |                 0.0                 0.0     |
    |                 0.5                 1.0     | <-- new point added
    |                 2.0                 4.0     |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
--------------------------------------------------------------------------------
7.4.4 LsCurveResample                                     *lsdyna-curveResample*

Description:
  Command re-samples the curve with new number of points.

Synatx:
  :[range]LsCurveResample -i incr
  :[range]LsCurveResample -p nump

Arguments:
  incr - re-sample increment
  nump - number of points

Abbreviation:
  :lcr<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
   >|                 0.0                 0.0     |<visual line selection>
   >|                 1.0                 1.0     |<visual line selection>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsCurveResample -i 0.2
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |                 0.0                 0.0     |
    |                 0.2                 0.2     |
    |                 0.4                 0.4     |
    |                 0.6                 0.6     |
    |                 0.8                 0.8     |
    |                 1.0                 1.0     |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.4.5 LsCurveMirror                                         *lsdyna-curveMirror*

Description:
  Mirror curve respect to origin point (0,0).

Syntax:
  :[range]LsCurveMirror

Arguments:
  None

Abbreviation:
  :lcm<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
   >|                 0.0                 0.0     |<visual line selection>
   >|                 4.0                 4.0     |<visual line selection>
   >|                 6.0                 6.0     |<visual line selection>
   >|                10.0                10.0     |<visual line selection>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsCurveMirror
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |               -10.0               -10.0     |
    |                -6.0                -6.0     |
    |                -4.0                -4.0     |
    |                 0.0                 0.0     |
    |                 4.0                 4.0     |
    |                 6.0                 6.0     |
    |                10.0                10.0     |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.4.6 LsCurveCut                                               *lsdyna-curveCut*

Description:
  Command to cut curve respect to user specific x range.

Synatx:
  :[range]LsCurveCut xLow:xUp

Arguments:
  xLow - low boundary of x range (optional, if empty first point used)
  xUp  - up boundary of x range (optional, if empty last point used)

  Examples:
  :'<,'>LsCurveCut    :0.7 --> cut from 1st point to 0.7
  :'<,'>LsCurveCut 0.2:0.7 --> cut from 0.2 to 0.7
  :'<,'>LsCurveCut 0.2:    --> cut from 0.2 to last point

Abbreviation:
  :lcc<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
   >|                 0.0                 0.0     |<visual line selection>
   >|                 0.2                 0.2     |<visual line selection>
   >|                 0.4                 0.4     |<visual line selection>
   >|                 0.6                 0.6     |<visual line selection>
   >|                 0.8                 0.8     |<visual line selection>
   >|                 1.0                 1.0     |<visual line selection>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsCurveCut 0.2:0.7
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |                 0.2                 0.2     | <-- bottom limit set
    |                 0.4                 0.4     |
    |                 0.6                 0.6     |
    |                 0.7                 0.7     | <-- top limit set
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.4.7 LsCurveWrite                                             *lsdyna-curveWrite*

Description:
  Write x and y curve points to extarnal file in XYDATA HyperGraph format.

Synatx:
  :LsCurveCut[!] [filename]

Arguments:
  filename - file path (optional)
  bang     - write all *DEFINE_CURVES in current buffer (optional)

  With out bang only *DEFINE_CURVE under the cursor is write to the file.
  If "filename" is not set a curve is write to file bufferName_IDxx.crv

Abbreviation:
  :lcw<Space>

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |       123         0       1.0       1.0     |
    |$#                a1                  o1     |
    |                 0.0                 0.0     |
   >|                 0.2                 0.2     |<cursor position>
    |                 0.4                 0.4     |                       
    |                 0.6                 0.6     |                       
    |                 0.8                 0.8     |                       
    |                 1.0                 1.0     |                       
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:LsCurveWrite
<
    +---------------------------------------------+
    |lsdyna_model_ID123.crv=======================|<-- new file with curve
    |XYDATA, 123 - Load                           |
    |                 0.0                 0.0     |
    |                 0.2                 0.2     |
    |                 0.4                 0.4     |                       
    |                 0.6                 0.6     |                       
    |                 0.8                 0.8     |                       
    |                 1.0                 1.0     |                       
    |ENDDATA                                      |
    |~                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.5 Encryption commands                                 *lsdyna-encryptCommands*

Encryption commands let you encrypt selected part of your ls-dyna keyword file
with GnuPG. To use encryption you must install and configure encryption software.

Command used for encryption is stored in variable "g:lsdynaEncryptCommand".
Default value can be see with command:
>
	echo g:lsdynaEncryptCommand
<
The variable can be overwrite by user with new command in .vimrc file.
>
	let g:lsdynaEncryptCommand = 'new_user command'
<
--------------------------------------------------------------------------------
7.5.1 Encryption lines                                      *lsdyna-encrypLines*

Description:
  Encrypt selected lines.

Syntax:
  :[range]LsEncryptLines [--date MM/DD/YYYY]

Arguments:
  --date : optional, set date of encryption expire, format MM/DD/YYYY

Example:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
   >|                 0.0                 0.0     |<visual selection line>
   >|                 1.0                 1.0     |<visual selection line>
   >|                 2.0                 2.0     |<visual selection line>
   >|                 3.0                 3.0     |<visual selection line>
   >|                 4.0                 4.0     |<visual selection line>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:'<,'>LsEncryptLines
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |-----BEGIN PGP MESSAGE-----                  |
    |                                             |
    |hQEOAynNq7gVWpx/EAP/T+hdXU4W+ZZinxA82uD6QdzD |
    |mFyQpkT3f949TBKpVFrXCo4gvMeEzHF/NBMCbilK9kY4 |
    |6Hx5CyB9CrVOTqkQfvhtf5u100LiKSu8UBkaGUFFtg/p |
    |                                             |
    |-----END PGP MESSAGE-----                    |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
7.5.2 Encryption file                                       *lsdyna-encryptFile*

Description:
  The commands encrypt file base on encryption rules set by the user.

Syntax:
  :LsEncryptFile [--file path] [--date MM/DD/YYYY] encrypt_rules

Arguments:

  --file        : optional, path to file with encryption rules
  --date        : optional, set date of encryption expire, format MM/DD/YYYY
  encrypt_rules : encryption rule syntax, not used if [--file] set

  keyword[, keyword, ...]/none|encrypt[:x]/[reverse_string] [, encryption_rule, ...]

  []        : optional part
  opt1|opt2 : option1 OR option2

  Encrypt rule has three arguments separated with '/' sign
  arg1/arg2/arg3

  First argument is a keyword name:
  - always required
  - can be with '*' or with out (*PART and PART is the same)
  - '*' stand for any keyword
  - is case not sensitive (PART and part is the same)
  - can include more than one value separated with ',' sign (part, mat_, ...)

  Second argument is encryption type:
  - always required
  - permitted values are:
    - none        : keyword is skipped for encryption
    - encrypt[:x] : keyword will be encrypted, x defines number of open
                    data lines from top. Comment lines and title lines are not
                    counted. "encrypt" and "encrypt:0" is the same.

  Third argument is reverse string:
  - is optional and let you exclude keywords from encryption
  - if the string is part of keyword encryption type will be reverse
    - encrypt[:x] --> none
    - none --> encrypt
  - string can be part of comment line or title line

Examples:

Encrypt all keywords in the file.
>
	:LsEncryptFile */encrypt
<
Encrypt all *MAT_ in the file.
>
	:LsEncryptFile mat_/encrypt
<
Encrypt all *MAT_ and *DEFINE_CURVE in the file, keep open two first lines.
>
	:LsEncryptFile mat_,define_curve/encrypt:2
	:LsEncryptFile mat_/encrypt:2, define_curve/encrypt:2
<
Encrypt all *DEFINE_CURVE in the file but skip any with '__open__' string.
>
	:LsEncryptFile define_curve/encrypt/__open__
<
Encrypt only *MAT_ with '__encrypt__' string.
>
	:LsEncryptFile mat/none/__encrypt__
<
Encrypt any keyword *DEFINE_ but *DEFINE_CURVE only with '__encrypt__ string.
>
	:LsEncryptFile define_/encrypt/, define_curve/none/__encrypt__
<

Reverse string can be put in any line between keyword name and the last data
line. Some examples with '_doNotEncrypt' string below.

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |<-- keyword name
    |$# title                                     |
    |Load_doNotEncrypt                            |<-- reverse string
    |$#    lcid      sidr       sfa       sfo     |    add to title
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |                 0.0                 0.0     |
    |                 4.0                 4.0     |<-- last dataline
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |<-- keyword name
    |$ _doNotEncrypt                              |<-- reverse string add
    |$# title                                     |    as extra comment line
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |                 0.0                 0.0     |
    |                 4.0                 4.0     |<-- last dataline
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

Examples of partial encryption below

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |$------------------------------------------- |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |                 0.0                 0.0     |
    |                 4.0                 4.0     |
    |$------------------------------------------- |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:LsEncryptFile define/encrypt
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |$------------------------------------------- |
    |-----BEGIN PGP MESSAGE-----                  |
    |                                             |
    |hQEOAynNq7gVWpx/EAP/T+hdXU4W+ZZinxA82uD6QdzD |
    |mFyQpkT3f949TBKpVFrXCo4gvMeEzHF/NBMCbilK9kY4 |
    |6Hx5CyB9CrVOTqkQfvhtf5u100LiKSu8UBkaGUFFtg/p |
    |                                             |
    |-----END PGP MESSAGE-----                    |
    |$------------------------------------------- |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:LsEncryptFile define/encrypt:1
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |$------------------------------------------- |
    |*DEFINE_CURVE_TITLE                          |<-- 1st data line open
    |Load                                         |<-- title line skipped
    |-----BEGIN PGP MESSAGE-----                  |<-- encrypt starts with
    |                                             |    2nd data line
    |hQEOAynNq7gVWpx/EAP/T+hdXU4W+ZZinxA82uD6QdzD |
    |mFyQpkT3f949TBKpVFrXCo4gvMeEzHF/NBMCbilK9kY4 |
    |6Hx5CyB9CrVOTqkQfvhtf5u100LiKSu8UBkaGUFFtg/p |
    |                                             |
    |-----END PGP MESSAGE-----                    |
    |$------------------------------------------- |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	:LsEncryptFile define/encrypt:2
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |$------------------------------------------- |
    |*DEFINE_CURVE_TITLE                          |<-- 1st dataline open
    |Load                                         |<-- title line skipped
    |         1         0       1.0       1.0     |<-- 2nd data line open
    |-----BEGIN PGP MESSAGE-----                  |<-- encryption starts with
    |                                             |    3rd data line
    |hQEOAynNq7gVWpx/EAP/T+hdXU4W+ZZinxA82uD6QdzD |
    |mFyQpkT3f949TBKpVFrXCo4gvMeEzHF/NBMCbilK9kY4 |
    |6Hx5CyB9CrVOTqkQfvhtf5u100LiKSu8UBkaGUFFtg/p |
    |                                             |
    |-----END PGP MESSAGE-----                    |
    |$------------------------------------------- |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------

With '--file' option all encryption rules will be read from external file.
Each line in the file is one encryption rule.  Lines started with '#' are
ignored and can be used as comments.

Example of encryption rules file:

    +---------------------------------------------+
    |encrypt_rules.txt============================|
    |#                                            |
    |# Encryption rules example                   |
    |# Encrypt all keywords but not mesh          |
    |#                                            |
    |*/encrypt/                                   |
    |*keyword/none/                               |
    |*end/none/                                   |
    |*node/none/                                  |
    |*element/none/                               |
    |#                                            |
    |~                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

    +---------------------------------------------+
    |encrypt_rules.txt============================|
    |#                                            |
    |# Encryption rules example                   |
    |# Encrypt all materials and curves           |
    |# but not marked with '__open__' string      |
    |#                                            |
    |*mat/encrypt/__open__                        |
    |*define_curve/encrypt:2/__open__             |
    |#                                            |
    |~                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

Example of command:
>
	:LsEncryptFile --file ./encrypt_rules.txt
<
Order of lines does not make a difference. All rules will be sorted
internally to first process keywords with the longest name (*DEFINE_CURVE will
be process before *DEFINE_).

--------------------------------------------------------------------------------
7.6 Keyword commands                                      *lsdyna-kwordCommands*

--------------------------------------------------------------------------------
7.6.1 LsKwordComment                                       *lsdyna-kwordComment*

Description:
  Comment specific keywords from file.

Syntax:
  :LsKwordComment[!] kwordNames

Arguments:
  kwordNames : list of keywords
               '*' at the beginning is optional
               name is ignore case
  bang '!' : comment all keywords but kwordNames

Abbreviation:
  :lkc<Space>

Example:
  comment every *PART
  :LsKwordComment part
  :LsKwordComment *PART

  comment all boundary
  :LsKwordComment boundary

  comment all but *MAT
  :LsKwordComment! mat

--------------------------------------------------------------------------------
7.6.2 LsKwordDelete                                         *lsdyna-kwordDelete*

Description:
  Delete specific keywords from file.

Syntax:
  :LsKwordDelete[!] kwordNames

Arguments:
  kwordNames : list of keywords separate with ' '
               '*' at the beginning is optional
               name is ignore case
  bang '!' : delete all keywords but kwordNames

Abbreviation:
  :lkd<Space>

Example:
  remove all *PART
  :LsKwordDelete part
  :LsKwordDelete *PART

  remove everything but *DEFINE_CURVE
  :LsKwordDelete! define_curve

  remove all everything but *NODE, *ELEMENT_ (keep mesh only)
  "LsKwordDelete! node element

================================================================================
8. Mappings                                                    *lsdyna-mappings*

This chapter collect list of mappings not related to any function. 
<ll> means local leader, which is a special key in VIM.  By default it is "\".
You might want to use different load leader, See ":help maplocalleader".

--------------------------------------------------------------------------------
8.1 Mappings list                                               *lsdyna-mapList*

  Key            | Action
 ----------------+-------------------------------------------------------------
  <F1>           | open manual for keyword under the cursor |lsdyna-lsManual|
  ]]             | jump to next keyword
  [[             | jump to previous keyword
  4<Space>       | put "$" at the beginning of the line (works only if "4" is in 1st col)
  <ll>c          | put empty comment line below
  <ll>C          | put empty comment line above
  <ll>0          | separator with title below
  <ll>1          | separator line (type 1) below
  <ll><Shift-1>  | separator with title above
  <ll><Shift-2>  | separator line (type 1) above

--------------------------------------------------------------------------------
8.2 Comment/uncomment                                           *lsdyna-comment*

The function is used to comment/uncomment line/lines in Ls-Dyna keyword file.
Function is mapped with <Alt-c> or <Ctrl-c>.

If selected line starts with "$" it will be uncommented, if the line does not
start with "$" it will be commented. If you selected more than one line
comment/uncomment will be performed according to first line from selection.

Example

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
   >|*DEFINE_CURVE_TITLE                          |<visual selection line>
   >|$# title                                     |<visual selection line>
   >|Load                                         |<visual selection line>
   >|$#    lcid      sidr       sfa       sfo     |<visual selection line>
   >|         1         0       1.0       1.0     |<visual selection line>
   >|$#                a1                  o1     |<visual selection line>
   >|                 0.0                 0.0     |<visual selection line>
   >|                 1.0                 1.0     |<visual selection line>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	<Alt-c>
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |$*DEFINE_CURVE_TITLE                         |
    |$$# title                                    |
    |$Load                                        |
    |$$#    lcid      sidr       sfa       sfo    |
    |$         1         0       1.0       1.0    |
    |$$#                a1                  o1    |
    |$                 0.0                 0.0    |
    |$                 1.0                 1.0    |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

To uncomment select the same lines and use <Alt-c> once again.

--------------------------------------------------------------------------------
8.3 Data line autoformatting                                 *lsdyna-autoFormat*

The plugin has simple autoformatting function. The function is trigged with
<\\> mapping (can be different if VIM local leader is changed). The function try
to format lines under specific keyword according to Ls-Dyna syntax rules.

Note:
It can be used also for conversion from free to fixed format.

Example: Column position adjusting

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*SET_PART_TITLE                              |
    |$# title                                     |
    |Contact_parts                                |
    |$#    pid1      pid2      pid3      pid4     |
   >|1 2 3                                        |<cursor position>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	<\\>
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*SET_PART_TITLE                              |
    |$# title                                     |
    |Contact_parts                                |
    |$#    pid1      pid2      pid3      pid4     |
    |         1         2         3               | <-- adjusted columns
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

Coma has a special meaning for auto format function, it defines column end.

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*SECTION_SHELL                               |
    |$#   secid    elform      shrf       nip     |
   >| 10, 2, , 5                                  |<cursor position>
    |$#      t1        t2        t3        t4     |
    |       1.0                                   |
    |$                                            |
    |~                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	<\\>
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*SECTION_SHELL                               |
    |$#   secid    elform      shrf       nip     |
   >|        10         2                   5     |<-- adjusted columns
    |$#      t1        t2        t3        t4     |
    |       1.0                                   |
    |$                                            |
    |~                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

The function support more than two entries in *DEFINE_CURVE

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
   >| 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 3.0      |<visual selection line>
   >| 4.0, 4.0, 5.0, 5.0, 6.0, 6.0, 7.0, 7.0      |<visual selection line>
   >| 8.0, 8.0                                    |<visual selection line>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	<\\>
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |                 0.0                 0.0     |
    |                 1.0                 1.0     |
    |                 2.0                 2.0     |
    |                 3.0                 3.0     |
    |                 4.0                 4.0     |
    |                 5.0                 5.0     |
    |                 6.0                 6.0     |
    |                 7.0                 7.0     |
    |                 8.0                 8.0     |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

The function is able recognise parameter type (integer, real, character) and
set correct prefix (I, R, C). If prefix is defined it will not be overwrite.
Note:
Only one parameter in line is supported.

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*PARAMETER                                   |
    |$#    name       val                         |
   >|par1 100                                     |<visual selection line>
   >|par2 -10                                     |<visual selection line>
   >|par3 1.0                                     |<visual selection line>
   >|par4 -5.0e-03                                |<visual selection line>
   >|par5 name01                                  |<visual selection line>
   >| R par6 100                                  |<visual selection line>
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	<\\>
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*parameter                                   |
    |$#    name       val                         |<-- integer
    |I     par1       100                         |<-- integer
    |I     par2       -10                         |<-- real
    |R     par3       1.0                         |<-- real
    |R     par4  -5.0e-03                         |<-- real
    |C     par5    name01                         |<-- character
    |I     par6       100                         |<-- integer
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
8.4 Text objects                                             *lsdyna-textObject*

The plugin gives you two new VIM text objects useful with Ls-Dyna syntax.
If you are not familiar with VIM text objects see ":help text-objects".

Ls-Dyna filetype plugin text-objects:
- <ik> : inside keyword
- <ak> : around keyword

You can use them with other VIM normal commands like <d>, <y>, <v>.
Both text object work the same way. There is no distinguish like in <aw>/<iw>.

Examples of use:

Put cursor at any keyword line:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |$-- Start load curve --                      |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
   >|Load                                         |<cursor position>
    |$#    lcid      sidr       sfa       sfo     |
    |         1         0       1.0       1.0     |
    |$#                a1                  o1     |
    |                 0.0                 0.0     |
    |                 1.0                 1.0     |
    |$-- End load curve --                        |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+
>
	<dak>
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |$-- Start load curve --                      |
    |$-- End load curve --                        |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

You can think about <dak> as "delete all keyword".

Keyword test objects in combination with auto format function let you in quick
way comment whole keyword.

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
   >|*PART                                        |<cursor position>
    |$#title                                      |
    |Support                                      |
    |$#      pid     secid       mid              |
    |          1         1         1              |
    |$                                            |
    |~                                            |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+
>
	<dak>
    <Alt-c>
<
    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |$*PART                                       |<-- all keyword lines
    |$$#title                                     |    commented
    |$Support                                     |
    |$$#      pid     secid       mid             |
    |$          1         1         1             |
    |$                                            |
    |~                                            |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+

--------------------------------------------------------------------------------
8.5 LsTags                                                         *lsdyna-tags*

The plugin lets you use part/section/material/... id as tag. To manually create
tag file use command ":LsTags" (|lsdyna-lsTags|) or <F11> key. When the tag
list is created you can use it. Below simple example is showed, for details
about tags please refer to ":help tags".

Set cursor on id and use <Ctrl>] to jump:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*BOUNDARY_PRESCRIBED_MOTION_NODE             |
    |$#  typeid       dof       vad      lcid     I
    |      1001         1         2      2000     |
    |$                                   ^        |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

If id is unique you will be moved to id position otherwise you must specify id:

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*BOUNDARY_PRESCRIBED_MOTION_NODE             |
    |$#  typeid       dof       vad      lcid     I
    |      1001         1         2      2000     |
    |$                                   ^        |
    |$                                            |
    |command-line=================================+
    |                                             |
    | 1 2000 F C PART                             |
    |            Support_plate                    |
    | 2 2000 F C CURVE                            |
    |            Load                             |
    | 3 2000 F C MATERIAL                         |
    |            Steel                            |
    | 4 2000 F C VECTOR                           |
    |            x-direction                      |
    |                                             |
    |Choose number: ?                             |
    +---------------------------------------------+

To jump to *DEFINE_CURVE id 2000 put 2 and confirm with <Enter>.

You can use "tjump" command to go to any id in the file

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*BOUNDARY_PRESCRIBED_MOTION_NODE             |
    |$#  typeid       dof       vad      lcid     I
    |      1001         1         2      1234     |
    |$                                            |
    |command-line=================================+
    |:tjump 1234                                  |
    +---------------------------------------------+

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
   >|      1234         0       1.0       1.0     |<
    |$#                a1                  o1     |
    |                 0.0                 0.0     |
    |                 1.0                 1.0     |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

With "ptjump" you can preview id in second window.
Use <Ctrl-w>] to make the same with normal command.

    +---------------------------------------------+
    |lsdyna_model.key=============================|
    |$                                            |
    |*BOUNDARY_PRESCRIBED_MOTION_NODE             |
    |$#  typeid       dof       vad      lcid     I
    |      1001         1         2      1234     |
    |$                                            |
    |command-line=================================+
    |:ptjump 1234                                 |
    +---------------------------------------------+

    +---------------------------------------------+
    |preview-window===============================|
    |$                                            |
    |*DEFINE_CURVE_TITLE                          |
    |$# title                                     |
    |Load                                         |
    |$#    lcid      sidr       sfa       sfo     |
   >|      1234         0       1.0       1.0     |<
    |$#                a1                  o1     |
    |                 0.0                 0.0     |
    |                 1.0                 1.0     |
    |$                                            |
    |lsdyna_model.key=============================|
    |$                                            |
    |*BOUNDARY_PRESCRIBED_MOTION_NODE             |
    |$#  typeid       dof       vad      lcid     I
    |      1001         1         2      1234     |
    |$                                            |
    |command-line=================================+
    |                                             |
    +---------------------------------------------+

================================================================================
9. Includes                                                    *lsdyna-includes*

This chapter shows how to use VIM and plugin features to work with Ls-Dyna
include files.

--------------------------------------------------------------------------------
9.1 File name completion                                    *lsdyna-includeName*

VIM file completion command <Ctrl-x><Ctrl-f> let you add a new include file to
your master deck.

The plugin looks for files in:
- current working directory (:pwd)
- all *INCLCUDE_PATH keywords
- all *INCLCUDE_PATH_RELATIVE keywords. 

Example:

    +---------------------------------------------+
    |lsdyna_model.k===============================|
    |$                                            |
    |*INCLUDE                                     |
    |../OO_INC/<Ctrl-x><Ctrl-f>                   |<trigger completion in path>
    |$                                            |
    |~                                            |
    |~                                            |
    |~                                            |
    |~                                            |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+

    +---------------------------------------------+
    |lsdyna_model.k===============================|
    |$                                            |
    |*INCLUDE                                     |
    |../OO_INC/                                   |
    |  | ../00_INC/include_A.inc  |               |
    |  | ../00_INC/include_B.inc  |               |
    | >| ../00_INC/include_C.inc  |<enter>        |<choose include>
    |  | ../00_INC/include_D.inc  |               |
    |  +--------------------------+               |
    |~                                            |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+

    +---------------------------------------------+
    |lsdyna_model.k===============================|
    |$                                            |
    |*INCLUDE                                     |
    |../00_INC/include_C.inc                      |<done>
    |$                                            |
    |~                                            |
    |~                                            |
    |~                                            |
    |~                                            |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+

Multi line paths are supported. In case a path is longer than 80 columns the
path will be split in two or three lines. The split is made respect to rules:
- if possible pathname goes into 1st and 2nd line (max 78+78 signs)
- if possible pathname is split at path separator (no split of directory name)
- if possible filename name goes into separate (last) line (max 80 signs)
- if not possible a path is split to use whole possible space (78+78+80 signs)


Example of multi line path:

    +---------------------------------------------+
    |lsdyna_model.k===============================|
    |$                                            |
    |*INCLUDE                                     |
    |/cae/platform/project/ +                     |<1st pathname line>
    |vehicle/includes/ +                          |<2nd pathname line>
    |include_01.inc                               |<filename line>
    |~                                            |
    |~                                            |
    |~                                            |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+

Note:
The plugin uses 'shellslash' VIM option to always force using of linux path
'/' separators.

--------------------------------------------------------------------------------
9.2 Include open                                            *lsdyna-includeOpen*

The plugin gives you following mappings to open include file under the cursor.

Open commands:
- <gf>     : open include file in current window
- <gF>     : open include file in new window (vertical split)
- <gt>     : open include file in new tab
- <gT>     : open include file in new tab in background
- <gd>     : open include directory in current window
- <gD>     : open include directory in new window
- <g><C-d> : open include directory in OS file manager (Windows only)

The commands are like "go" to "file, directory, tab".

The plugin try to resolve relative paths in following order:
1. respect to VIM current working directory
2. respect to include file
3. respect to *INCLUDE_PATH

Example:

    +---------------------------------------------+
    |lsdyna_model.k===============================|
    |$                                            |
    |*INCLUDE                                     |
    |../OO_INC/include_A.inc                      |
    |*INCLUDE                                     |
   >|../OO_INC/include_B.inc                      |<cursor position>
    |*INCLUDE                                     |
    |../OO_INC/include_C.inc                      |
    |$                                            |
    |~                                            |
    |~                                            |
    |~                                            |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+
>
	<gf>
<
    +---------------------------------------------+
    |include_B.inc================================|
    |$                                            |
    |$ include B                                  |
    |$                                            |
    |*NODE                                        |
    | 1000, 0.0, 0.0, 0.0                         |
    | ...                                         |
    |*ELEMENT_SHELL                               |
    | 1000, 1001, 1002, 1003, 1004                |
    | ...                                         |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+

Note: Multi line definitions for path is supported.

--------------------------------------------------------------------------------
9.3 Include manager                                      *lsdyna-includeManager*

The plugin does not have dedicated feature to manage the includes however using
keyword manager |lsdyna-lsManager| to build list of includes gives you some
extra commands to work with include files.

Show includes list in current buffer:

    +---------------------------------------------+
    |lsdyna_model.k===============================|
    |$                                            |
    |*INCLUDE_PATH                                |
    |../OO_INC/                                   |
    |*INCLUDE                                     |
    |../OO_INC/include_A.inc                      |
    |*INCLUDE                                     |
    |include_B.inc                                |
    |*INCLUDE_TRANSFORM                           |
    |include_C.inc                                |
    |*INCLUDE_TRANSFORM                           |
    |../O1_INC/include_D.inc                      |
    |$                                            |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+
>
    :LsManager include
	<F12><i>
	<F12><F12>
<
    +---------------------------------------------+
    |lsdyna_model.k===============================|
    |$                                            |
    |*INCLUDE_PATH                                |
    |../OO_INC/                                   |
    |*INCLUDE                                     |
    |../OO_INC/include_A.inc                      |
    |*INCLUDE                                     |
    |include_B.inc                                |
    |*INCLUDE_TRANSFORM                           |
    |include_C.inc                                |
    |*INCLUDE_TRANSFORM                           |
    |../O1_INC/include_D.inc                      |
    |$                                            |
    |~                                            |
    |=============================================|
    | 1. ../OO_INC/    | PATH                     |
    | 2. include_A.inc |                          |
    | 3. include_B.inc |                          |
    | 4. include_C.inc | TRANSFORM                |
    | 5. include_D.inc | error                    |<-- include not found
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+

To perform recursive search (include inside include) use:
>
    :LsManager! include
	<Shift-F12><i>
	<Shift-F12><F12>
<
    +---------------------------------------------+
    |lsdyna_model.k===============================|
    |$                                            |
    |*INCLUDE_PATH                                |
    |../OO_INC/                                   |
    |*INCLUDE                                     |
    |../OO_INC/include_A.inc                      |
    |*INCLUDE                                     |
    |include_B.inc                                |
    |*INCLUDE_TRANSFORM                           |
    |include_C.inc                                |
    |*INCLUDE_TRANSFORM                           |
    |../O1_INC/include_D.inc                      |
    |$                                            |
    |~                                            |
    |=============================================|
    | 1. ../OO_INC/       | PATH                  |
    | 2. include_A.inc    |                       |
    | 3.   include_A1.inc |                       |
    | 4.   include_A2.inc |                       |
    | 5. include_B.inc    |                       |
    | 6. include_C.inc    | TRANSFORM             |
    | 7.   include_C1.inc |                       |
    | 8.   include_C2.inc |                       |
    | 9. include_D.inc    | error                 |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+

Include manager window is split with two columns. Left has list of includes
names and right has additional information about include like:
- include type (PATH, TRANSFORM, ...)
- "error" message if file is not found

Full list of 'LsManager' commands can be found here |lsdyna-commandsManager|.

Here we will take a close look to commands which operate directly on files:
- <C> : copy include file
- <R> : rename include file
- <D> : delete include file

Let say we want to make a copy of "include_B.inc" file so we can modified its
content and run a new simulation.

First we open master deck file and use <F12><F12> to get list of includes:

    +---------------------------------------------+
    |lsdyna_model.k===============================|
    |$                                            |
    |*INCLUDE                                     |
    |../OO_INC/include_A.inc                      |
    |*INCLUDE                                     |
    |../OO_INC/include_B.inc                      |
    |*INCLUDE                                     |
    |../OO_INC/include_C.inc                      |
    |$                                            |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+
>
	<F12><F12>
<
    +---------------------------------------------+
    |lsdyna_model.k===============================|
    |$                                            |
    |*INCLUDE                                     |
    |../OO_INC/include_A.inc                      |
    |*INCLUDE                                     |
    |../OO_INC/include_B.inc                      |
    |*INCLUDE                                     |
    |../OO_INC/include_C.inc                      |
    |$                                            |
    |~                                            |
    |=============================================|
    | 1. include_A.inc |                          |
   >| 2. include_B.inc |                          |<C>
    | 3. include_C.inc |                          |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+

Next we go to specific include (line) on the list and use command <C>

    +---------------------------------------------+
    |lsdyna_model.k===============================|
    |$                                            |
    |*INCLUDE                                     |
    |../OO_INC/include_A.inc                      |
    |*INCLUDE                                     |
    |../OO_INC/include_B.inc                      |
    |*INCLUDE                                     |
    |../OO_INC/include_C.inc                      |
    |$                                            |
    |~                                            |
    |command-line=================================|
    |New include name: include_B1.inc             |<put a new include name>
    +---------------------------------------------+

When we accept a new name with <enter> VIM will copy "include_B.inc" file
into "include_B1.inc" file and update path line under *INCLUDE keyword.

    +---------------------------------------------+
    |lsdyna_model.k===============================|
    |$                                            |
    |*INCLUDE                                     |
    |../OO_INC/include_A.inc                      |
    |*INCLUDE                                     |
    |../OO_INC/include_B1.inc                     |<gf>
    |*INCLUDE                                     |
    |../OO_INC/include_C.inc                      |
    |$                                            |
    |~                                            |
    |command-line=================================|
    |                                             |
    +---------------------------------------------+

Since our cursor is already at new include we can use <gf> command to open
this include and make changes we want to.

With <F12><I> command you can open the last include list history. It is helpful
if you have to update more than one include. Using once again <F12><F12> will
trigger search for any *INCLUDE keyword in current buffer (include_A.inc). In 
this case we will get empty list since there is no includes in "include_A.inc"
file. To jump to next include we have move back to master deck, for instance
delete buffer with <bd> command and then use <F12><F12> to perform new include
search on master deck. Using of <F12><I> is faster to open last include 
list and make direct jump from "include_A.inc" to "include_B".inc.

================================================================================
10. License                                                     *lsdyna-license*

Ls-Dyna filetype plugin for VIM
Copyright (C) 2014 Bartosz Gradzik (bartosz.gradzik@hotmail.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.

================================================================================
vim:tw=80:ts=4:ft=help:norl:
